[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "cmdchat"
version = "0.1.0"
description = "Secure in-memory console chat"
readme = "README.md"
authors = [{name = "CMD CHAT"}]
requires-python = ">=3.10"
dependencies = [
  "cryptography>=41,<43"
]

[project.optional-dependencies]
dev = [
  # Testing
  "pytest>=7.4.0",
  "pytest-asyncio>=0.21.0",
  "pytest-cov>=4.1.0",
  "pytest-mock>=3.11.0",
  "pytest-xdist>=3.5.0",  # Parallel testing
  # Code quality
  "black>=24.0.0",
  "ruff>=0.7.0",
  "mypy>=1.13.0",
  # Security
  "bandit>=1.7.0",
  "safety>=3.0.0",
  # Pre-commit
  "pre-commit>=3.6.0",
  # Build tools
  "build>=1.0.0",
  "twine>=5.0.0",
  # Documentation
  "sphinx>=7.0.0",
  "sphinx-rtd-theme>=2.0.0",
]

[project.scripts]
cmdchat-server = "cmdchat.cli:main"
cmdchat-client = "cmdchat.client_cli:main"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=cmdchat",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]

[tool.coverage.run]
source = ["cmdchat"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/.*",
]

[tool.black]
line-length = 100
target-version = ["py311", "py312", "py313"]
include = '\.pyi?$'
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py311"
extend-exclude = [
    ".git",
    ".venv",
    "__pycache__",
    "build",
    "dist",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    "C4",  # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    "EM",  # flake8-errmsg
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "PIE", # flake8-pie
    "PT",  # flake8-pytest-style
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "PLR0913", # Too many arguments
    "PLR2004", # Magic value comparison
    "ISC001",  # Conflicts with formatter
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "PLR2004", # Magic values in tests
    "ARG001",  # Unused arguments (fixtures)
    "S101",    # Use of assert
]

[tool.ruff.lint.isort]
known-first-party = ["cmdchat"]
force-sort-within-sections = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "lf"

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true
show_error_codes = true
show_column_numbers = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.bandit]
exclude_dirs = ["tests", ".venv", "build", "dist"]
skips = ["B101"]  # Skip assert_used in tests

[tool.bandit.assert_used]
skips = ["*/test_*.py"]


[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
